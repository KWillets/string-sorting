#!/bin/bash
################################################################################
# Copyright 2008 by Tommi Rantala <tt.rantala@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
################################################################################
function die() {
	echo "ERROR: $1"
	exit 1
}
################################################################################
if [[ -z $BIN  ]] ; then BIN=./sortstring ; fi
if [[ ! -x $BIN ]] ; then die "Sorry, binary not executable" ; fi
if [[ -z $ALGS ]] ; then ALGS=`$BIN --alg-nums` ; fi
if [[ -z $INFILES ]] ; then INFILES="input/url3 input/nodup3 input/genome3" ; fi
if [[ -z $OUTDIR ]] ; then OUTDIR="data" ; fi
mkdir -p $OUTDIR
if [[ -z $TOOLOUTDIR ]] ; then TOOLOUTDIR="tool-output"; fi
mkdir -p $TOOLOUTDIR
for I in $INFILES ; do
        if [[ ! -r $I ]] ; then die "Sorry, ''$I'' not readable" ; fi
done
################################################################################
let ALGCOUNT=0; for A in $ALGS ; do let ++ALGCOUNT; done
let FILECOUNT=0; for F in $INFILES ; do let ++FILECOUNT; done
################################################################################
echo "ALGS=$ALGS"
echo "INFILES=$INFILES"
echo "Starting measurements ..."
KDIALOG=`which kdialog 2>/dev/null`
if [[ -x "$KDIALOG" ]] ; then
	# dont spawn kdialog in a subshell
	kdialog --caption "memusage" --progressbar "-" $(($FILECOUNT*$ALGCOUNT)) 2>/dev/null >.tmp
	DCOPREF=`cat .tmp`
	rm .tmp
fi
if [[ -n "$DCOPREF" ]] ; then dcop $DCOPREF setAutoClose 1 ; fi
for FILE in $INFILES ; do
	echo "Input file $FILE ..."
	if [[ -n "$DCOPREF" ]] ; then dcop $DCOPREF setLabel "<pre>$FILE</pre><pre>Baseline calculation ...</pre>" ; fi
	# Find out baseline values by running with non-existent algorithm. We
	# can then find out how much memory the actual algorithm requires and
	# how many malloc calls it makes.
	TOOLOUT=$TOOLOUTDIR/memusage_`basename ${FILE}`_0
	memusage $BIN 0 $FILE >/dev/null 2>$TOOLOUT
	for ALG in $ALGS ; do
		if [[ -n "$DCOPREF" ]] ; then dcop $DCOPREF setLabel "<pre>$FILE</pre><pre>`$BIN --alg-name=$ALG`</pre>" ; fi
		TOOLOUT=$TOOLOUTDIR/memusage_`basename ${FILE}`_${ALG}
		memusage $BIN $ALG $FILE >/dev/null 2>$TOOLOUT
		if [[ $? -ne 0 ]] ; then echo "WARNING: failure with alg=$ALG input=$FILE" ; fi
		if [[ -n "$DCOPREF" ]] ; then PROGRESS=`dcop $DCOPREF progress` ; fi
		if [[ -n "$DCOPREF" ]] ; then dcop $DCOPREF setProgress $((PROGRESS+1)) ; fi
	done
done
