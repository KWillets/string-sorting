#!/bin/bash
################################################################################
# Copyright 2008 by Tommi Rantala <tommi.rantala@cs.helsinki.fi>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
################################################################################
if [[ `id -u` != 0 ]] ; then
	echo "Sorry, profiling requires root priviledges"
	exit 1
fi
################################################################################
function die() {
	echo "ERROR: $1"
	exit 1
}
################################################################################
if [[ -z $EVENTS ]] ; then
	EVENTS="CPU_CLK_UNHALTED:100000
		LOAD_BLOCK:10000:0x02
		LOAD_BLOCK:10000:0x04
		LOAD_BLOCK:10000:0x08
		LOAD_BLOCK:10000:0x10
		LOAD_BLOCK:10000:0x20
		STORE_BLOCK:10000:0x02
		INST_RETIRED:100000
		DTLB_MISSES:10000
		MEM_LOAD_RETIRED:10000:0x02
		MEM_LOAD_RETIRED:10000:0x08
		L2_LINES_IN:10000
		L1D_CACHE_LD:10000
		SIMD_INST_RETIRED:100000"
fi
################################################################################
if [[ -z $BIN  ]] ; then BIN=./sortstring ; fi
if [[ ! -x $BIN ]] ; then die "Sorry, binary not executable" ; fi
if [[ -z $ALGS ]] ; then ALGS=`$BIN --alg-nums` ; fi
if [[ -z $INFILES ]] ; then INFILES="input/url3 input/nodup3 input/genome3" ; fi
if [[ -z $OUTDIR ]] ; then OUTDIR="data" ; fi
mkdir -p $OUTDIR
if [[ -z $TOOLOUTDIR ]] ; then TOOLOUTDIR="tool-output"; fi
for I in $INFILES ; do
        if [[ ! -r "$I" ]] ; then die "Sorry, ''$I'' not readable" ; fi
done
# Oprofile requires absolute path.
OPSESSIONDIR=$PWD/$TOOLOUTDIR/oprofile-session-dir
mkdir -p $OPSESSIONDIR
################################################################################
# 1. event to monitor
# 2. algorithm
# 3. input file name
# 4. oprofile XML output file name
################################################################################
function round() {
	echo "  Profiling algorithm ''$2'', input ''$3'', event ''$1'' ..."
	local SESSIONNAME=`basename "$3"`_${2}_`echo $1 | sed 's/:/_/g'`
	if [[ -e "$OPSESSIONDIR/samples/$SESSIONNAME" ]] ; then
		rm -rf "$OPSESSIONDIR/samples/$SESSIONNAME"
	fi
	opcontrol --session-dir=$OPSESSIONDIR --reset >>.op_log 2>&1 || die "Could not reset OProfile"
	# Nuke old configuration file. Only (?) way to _really_ clean up old
	# settings.
	rm -f /root/.oprofile/daemonrc
	opcontrol --session-dir=$OPSESSIONDIR --image=$BIN --separate=kernel --vmlinux=/usr/lib/debug/lib/modules/`uname -r`/vmlinux --event=$1 >>.op_log 2>&1 || die "Could not setup OProfile correctly"
	$BIN --oprofile $2 "$3" >>.op_log 2>&1
	if [[ $? -ne 0 ]] ; then echo "WARNING: failure was reported" ; fi
	opcontrol --session-dir=$OPSESSIONDIR --shutdown >>.op_log 2>&1 || die "Could not shutdown OProfile correctly"
	opcontrol --session-dir=$OPSESSIONDIR --save=$SESSIONNAME
	if [[ $? -ne 0 ]] ; then die "Failed in --save"; fi
}
################################################################################
echo "ALGS=$ALGS"
echo "EVENTS=$EVENTS"
echo "INFILES=$INFILES"
if [[ -e $OPSESSIONDIR/lock ]] ; then
	echo "WARNING: oprofile lock file exists!"
	KILLPID=`cat $OPSESSIONDIR/lock`
	echo "killing PID $KILLPID"
	kill $KILLPID
	sleep 1
fi
# kill old daemons
ps -C oprofiled >/dev/null 2>&1
if [[ $? -ne 1 ]] ; then
	echo "WARNING: oprofiled alive, killing!"
	killall oprofiled
fi
echo "Starting measurements ..."
for FILE in $INFILES ; do
	echo "Input file $FILE ..."
	for ALG in $ALGS ; do
		for EVENT in $EVENTS ; do
			round $EVENT $ALG "$FILE" $XMLOUT
		done
	done
done
