#!/bin/bash
################################################################################
# Copyright 2008 by Tommi Rantala <tommi.rantala@cs.helsinki.fi>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
################################################################################
function die() {
	echo "ERROR: $1"
	exit 1
}
################################################################################
if [[ -z $EVENTS ]] ; then
	EVENTS="CPU_CLK_UNHALTED:100000
		LOAD_BLOCK:10000:0x02
		LOAD_BLOCK:10000:0x04
		LOAD_BLOCK:10000:0x08
		LOAD_BLOCK:10000:0x10
		LOAD_BLOCK:10000:0x20
		STORE_BLOCK:10000:0x02
		INST_RETIRED:100000
		DTLB_MISSES:10000
		MEM_LOAD_RETIRED:10000:0x02
		MEM_LOAD_RETIRED:10000:0x08
		L2_LINES_IN:10000
		L1D_CACHE_LD:10000
		SIMD_INST_RETIRED:100000"
fi
################################################################################
if [[ -z $BIN  ]] ; then BIN=./sortstring ; fi
if [[ ! -x $BIN ]] ; then die "Sorry, binary not executable" ; fi
if [[ -z $ALGS ]] ; then ALGS=`$BIN --alg-nums` ; fi
if [[ -z $INFILES ]] ; then INFILES="input/url3 input/nodup3 input/genome3" ; fi
if [[ -z $OUTDIR ]] ; then OUTDIR="data" ; fi
mkdir -p $OUTDIR
if [[ -z $TOOLOUTDIR ]] ; then TOOLOUTDIR="tool-output"; fi
for I in $INFILES ; do
        if [[ ! -r "$I" ]] ; then die "Sorry, ''$I'' not readable" ; fi
done
# Oprofile requires absolute path.
OPSESSIONDIR=$PWD/$TOOLOUTDIR/oprofile-session-dir
################################################################################
let ALGCOUNT=0; for A in $ALGS ; do let ++ALGCOUNT; done
let FILECOUNT=0; for F in $INFILES ; do let ++FILECOUNT; done
let EVENTCOUNT=0; for E in $EVENTS ; do let ++EVENTCOUNT; done
################################################################################
echo "ALGS=$ALGS"
echo "EVENTS=$EVENTS"
echo "INFILES=$INFILES"
echo "Processing XML ..."
KDIALOG=`which kdialog 2>/dev/null`
if [[ -x "$KDIALOG" ]] ; then
	# dont spawn kdialog in a subshell
	kdialog --caption "Process OProfile data" --progressbar "-" $((2*$FILECOUNT*$ALGCOUNT*$EVENTCOUNT)) 2>/dev/null >.tmp
	DCOPREF=`cat .tmp`
	rm .tmp
fi
if [[ -n "$DCOPREF" ]] ; then dcop $DCOPREF setAutoClose 1 ; fi
for FILE in $INFILES ; do
	echo "   Input file $FILE ..."
	BFILE=`basename "$FILE"`
	for ALG in $ALGS ; do
		XMLOUT="$OUTDIR/oprofile_${BFILE}_${ALG}.xml"
		echo "<simple>" > $XMLOUT || die "Could not create $XMLOUT"
		for EVENT in $EVENTS ; do
			if [[ -n "$DCOPREF" ]] ; then dcop $DCOPREF setLabel "<pre>Generating XML ...</pre><pre>$FILE</pre><pre>`$BIN --alg-name=$ALG`</pre><pre>$EVENT</pre>" ; fi
			NICE_EVENT="`echo $EVENT | sed 's/:/_/g'`"
			SESSIONNAME="${BFILE}_${ALG}_${NICE_EVENT}"
			opreport --session-dir=$OPSESSIONDIR --xml \
				session:$SESSIONNAME $BIN >.report 2>/dev/null
			if [[ $? -ne 0 ]] ; then
				echo "WARNING: session $SESSIONNAME failed"
			else
				xsltproc oprofile-simplify.xsl .report >> $XMLOUT
			fi
			rm -f .report
			if [[ -n "$DCOPREF" ]] ; then PROGRESS=`dcop $DCOPREF progress` ; fi
			if [[ -n "$DCOPREF" ]] ; then dcop $DCOPREF setProgress $((PROGRESS+1)) ; fi
		done
		echo "</simple>" >> $XMLOUT
	done
done
echo "Processing HTML ..."
for FILE in $INFILES ; do
	echo "   Input file $FILE ..."
	BFILE=`basename "$FILE"`
	for ALG in $ALGS ; do
		for EVENT in $EVENTS ; do
			if [[ -n "$DCOPREF" ]] ; then dcop $DCOPREF setLabel "<pre>Generating HTML ...</pre><pre>$FILE</pre><pre>`$BIN --alg-name=$ALG`</pre><pre>$EVENT</pre>" ; fi
			# convert : -> _
			NICE_EVENT="`echo $EVENT | tr : _`"
			SESSIONNAME="${BFILE}_${ALG}_${NICE_EVENT}"
			# strip event count for HTML file name:
			#   STORE_BLOCK:10000:0x02  -> STORE_BLOCK_0x02
			#   DTLB_MISSES:10000       -> DTLB_MISSES
			HTML_EVENT="`echo $EVENT | awk -F: '{if (\$3) print \$1 "_" \$3; else print \$1;}'`"
			HTMLOUT="$OUTDIR/opannotate_${BFILE}_${ALG}_${HTML_EVENT}.html"
			opannotate --session-dir=$OPSESSIONDIR \
				session:$SESSIONNAME --demangle smart \
				--image-path=/lib/modules/`uname -r`/kernel \
				--source --threshold 2 >> .report
			ST=$?
			if [[ $ST -eq 0 ]] ; then
				if [[ -x "./cpp2html" ]] ; then
					./cpp2html .report > $HTMLOUT
				else
					echo "<html><body><pre>" > $HTMLOUT
					cat .report >> $HTMLOUT
					echo "</pre></body></html>" >> $HTMLOUT
				fi
			fi
			rm -f .report
			if [[ -n "$DCOPREF" ]] ; then PROGRESS=`dcop $DCOPREF progress` ; fi
			if [[ -n "$DCOPREF" ]] ; then dcop $DCOPREF setProgress $((PROGRESS+1)) ; fi
		done
	done
done
